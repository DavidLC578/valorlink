// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  email          String      @unique
  username       String      @unique
  password   String
  region         Region      @relation(fields: [regionId], references: [id])
  regionId       Int
  rank           Rank        @relation(fields: [rankId], references: [id])
  rankId         Int
  role           Role        @relation(fields: [roleId], references: [id])
  roleId         Int
  friendsSent    Friendship[] @relation("FriendRequestsSent")
  friendsReceived Friendship[] @relation("FriendRequestsReceived")
  messagesSent   Message[]   @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
  createdAt      DateTime    @default(now())
}

model Region {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  users    User[]
}

model Rank {
  id       Int     @id @default(autoincrement())
  name     String  // Ej: Hierro 1, Plata 3
  tier     Int     // Ej: 1 a 25 (Ãºtil para ordenar)
  users    User[]
}

model Role {
  id       Int     @id @default(autoincrement())
  name     String  // Duelista, Iniciador, etc.
  users    User[]
}

model Friendship {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  status      FriendshipStatus // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())

  sender   User @relation("FriendRequestsSent", fields: [senderId], references: [id])
  receiver User @relation("FriendRequestsReceived", fields: [receiverId], references: [id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  createdAt   DateTime @default(now())

  sender   User @relation("MessagesSent", fields: [senderId], references: [id])
  receiver User @relation("MessagesReceived", fields: [receiverId], references: [id])
}
