// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  username          String       @unique
  password          String
  friendsSent       Friendship[] @relation("FriendRequestsSent")
  friendsReceived   Friendship[] @relation("FriendRequestsReceived")
  messagesSent      Message[]    @relation("MessagesSent")
  messagesReceived  Message[]    @relation("MessagesReceived")
  isProfileComplete Boolean      @default(false)
  createdAt         DateTime     @default(now())
  Player            Player?
}

model Player {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  alias       String
  description String?
  region      String
  roles       String[]
  rank        String
}

model Friendship {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus // PENDING, ACCEPTED, REJECTED
  createdAt  DateTime         @default(now())

  sender   User @relation("FriendRequestsSent", fields: [senderId], references: [id])
  receiver User @relation("FriendRequestsReceived", fields: [receiverId], references: [id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())

  sender   User @relation("MessagesSent", fields: [senderId], references: [id])
  receiver User @relation("MessagesReceived", fields: [receiverId], references: [id])
}
